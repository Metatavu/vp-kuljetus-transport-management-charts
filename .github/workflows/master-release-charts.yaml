name: Release Charts

on:
  push:
    branches:
      - master
  workflow_run:
    workflows: [Scheduled Release]
    types:
      - completed
  workflow_dispatch:

jobs:
  build-auth-providers:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-tms-keycloak-auth-providers
          owner: Metatavu
          workflow: master-maven-publish.yml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-tms-keycloak-auth-providers
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-keycloak:
    environment: master
    runs-on: ubuntu-latest
    needs: build-auth-providers
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-transport-management-keycloak
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-transport-management-keycloak
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-vehicle-data-receiver:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-vehicle-data-receiver
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-vehicle-data-receiver
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-vehicle-management-service:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-vehicle-management-service-api
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-vehicle-management-service-api
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-work-planning-service:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-work-planning-service-api
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-work-planning-service-api
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-delivery-info-service:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-delivery-info-service-api
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-delivery-info-service-api
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-user-management-service:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-user-management-service-api
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-user-management-service-api
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  build-monitoring-service:
    environment: master
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch build
        uses: codex-/return-dispatch@v1
        id: dispatch
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          ref: master
          repo: vp-kuljetus-monitoring-service-api
          owner: Metatavu
          workflow: master-publish-docker-image.yaml

      - name: Await completion
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repo: vp-kuljetus-monitoring-service-api
          owner: Metatavu
          run_id: ${{ steps.dispatch.outputs.run_id }}
          run_timeout_seconds: 600

  release:
    environment: master
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - build-auth-providers
      - build-keycloak
      - build-vehicle-data-receiver
      - build-vehicle-management-service
      - build-work-planning-service
      - build-delivery-info-service
      - build-user-management-service
      - build-monitoring-service
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
          ref: 'master'

      - name: Checkout latest spec
        run: |
          git submodule set-branch --branch master specs &&
          git submodule update --init --recursive

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              ${{ secrets.VAULT_PATH }} AUTH_HOSTNAME | AUTH_HOSTNAME ;
              ${{ secrets.VAULT_PATH }} AWS_ACCESS_KEY_ID | AWS_ACCESS_KEY_ID ;
              ${{ secrets.VAULT_PATH }} AWS_REGION | AWS_REGION ;
              ${{ secrets.VAULT_PATH }} AWS_SECRET_ACCESS_KEY | AWS_SECRET_ACCESS_KEY ;
              ${{ secrets.VAULT_PATH }} DISPATCH_PAT | DISPATCH_PAT ;
              ${{ secrets.VAULT_PATH }} EKS_CLUSTER_NAME | EKS_CLUSTER_NAME ;
              ${{ secrets.VAULT_PATH }} HCV_PATH | HCV_PATH ;
              ${{ secrets.VAULT_PATH }} HCV_SERVER | HCV_SERVER ;
              ${{ secrets.VAULT_PATH }} HCV_TOKEN_SECRET_NAME | HCV_TOKEN_SECRET_NAME ;
              ${{ secrets.VAULT_PATH }} K8S_CLUSTER_ISSUER | K8S_CLUSTER_ISSUER ;
              ${{ secrets.VAULT_PATH }} K8S_DATA_RECEIVER_STORAGE_CLASS | K8S_DATA_RECEIVER_STORAGE_CLASS ;
              ${{ secrets.VAULT_PATH }} K8S_DATA_RECEIVER_STORAGE_SIZE | K8S_DATA_RECEIVER_STORAGE_SIZE ;
              ${{ secrets.VAULT_PATH }} K8S_NAMESPACE | K8S_NAMESPACE ;
              ${{ secrets.VAULT_PATH }} K8S_TLS_SECRET_NAME | K8S_TLS_SECRET_NAME ;
              ${{ secrets.VAULT_PATH }} RABBIT_MANAGEMENT_HOSTNAME | RABBIT_MANAGEMENT_HOSTNAME ;
              ${{ secrets.VAULT_PATH }} TYK_HOSTNAME | TYK_HOSTNAME ;

      - name: Calculate new version
        id: resolve_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          dry_run: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: 'transport-management-'

      - name: Set new version
        id: version
        run: |
          echo NEW_VERSION=$(echo ${{ steps.resolve_version.outputs.new_tag }}|sed s/transport-management-//) >> $GITHUB_ENV

      - name: Update versions
        run: |
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/auth/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/tyk-gateway/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/tyk-redis/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/vehicle-data-receiver/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/vehicle-management-service/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/work-planning-service/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/delivery-info-service/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/user-management-service/Chart.yaml &&
          sed -i 's/version: .*/version: ${{ env.NEW_VERSION }}/g' ./charts/transport-management/charts/monitoring-service/Chart.yaml &&
          git add ./charts/transport-management/Chart.yaml ./charts/transport-management/charts/auth/Chart.yaml ./charts/transport-management/charts/tyk-gateway/Chart.yaml ./charts/transport-management/charts/tyk-redis/Chart.yaml ./charts/transport-management/charts/vehicle-data-receiver/Chart.yaml ./charts/transport-management/charts/vehicle-management-service/Chart.yaml ./charts/transport-management/charts/work-planning-service/Chart.yaml ./charts/transport-management/charts/delivery-info-service/Chart.yaml ./charts/transport-management/charts/user-management-service/Chart.yaml

      - name: Resolve auth docker image sha
        id: auth-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-transport-management-keycloak:latest &&
          echo AUTH_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-transport-management-keycloak:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update auth image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.auth-tag.outputs.AUTH_IMAGE_SHA }}/g' ./charts/transport-management/charts/auth/values.yaml &&
          git add ./charts/transport-management/charts/auth/values.yaml

      - name: Resolve data receiver project docker image sha
        id: data-receiver-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-vehicle-data-receiver:latest &&
          echo DATA_RECIVER_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-vehicle-data-receiver:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update data receiver project image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.data-receiver-tag.outputs.DATA_RECIVER_IMAGE_SHA }}/g' ./charts/transport-management/charts/vehicle-data-receiver/values.yaml &&
          git add ./charts/transport-management/charts/vehicle-data-receiver/values.yaml

      - name: Resolve vehicle management service project docker image sha
        id: vehicle-management-service-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-vehicle-management-service-api:latest &&
          echo VEHICLE_MANAGEMENT_SERVICE_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-vehicle-management-service-api:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update vehicle management service image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.vehicle-management-service-tag.outputs.VEHICLE_MANAGEMENT_SERVICE_IMAGE_SHA }}/g' ./charts/transport-management/charts/vehicle-management-service/values.yaml &&
          git add ./charts/transport-management/charts/vehicle-management-service/values.yaml

      - name: Resolve work planning service project docker image sha
        id: work-planning-service-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-work-planning-service-api:latest &&
          echo WORK_PLANNING_SERVICE_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-work-planning-service-api:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update work planning service image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.work-planning-service-tag.outputs.WORK_PLANNING_SERVICE_IMAGE_SHA }}/g' ./charts/transport-management/charts/work-planning-service/values.yaml &&
          git add ./charts/transport-management/charts/work-planning-service/values.yaml

      - name: Resolve delivery info service project docker image sha
        id: delivery-info-service-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-delivery-info-service-api:latest &&
          echo DELIVERY_INFO_SERVICE_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-delivery-info-service-api:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update delivery info service image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.delivery-info-service-tag.outputs.DELIVERY_INFO_SERVICE_IMAGE_SHA }}/g' ./charts/transport-management/charts/delivery-info-service/values.yaml &&
          git add ./charts/transport-management/charts/delivery-info-service/values.yaml

      - name: Resolve user management service project docker image sha
        id: user-management-service-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-user-management-service-api:latest &&
          echo USER_MANAGEMENT_SERVICE_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-user-management-service-api:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update user management service image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.user-management-service-tag.outputs.USER_MANAGEMENT_SERVICE_IMAGE_SHA }}/g' ./charts/transport-management/charts/user-management-service/values.yaml &&
          git add ./charts/transport-management/charts/user-management-service/values.yaml

      - name: Resolve monitoring service project docker image sha
        id: monitoring-service-tag
        run: |
          docker pull ghcr.io/metatavu/vp-kuljetus-monitoring-service-api:latest &&
          echo MONITORING_SERVICE_IMAGE_SHA=$(docker inspect ghcr.io/metatavu/vp-kuljetus-monitoring-service-api:latest|jq '.[].RepoDigests[0]'|sed s/\"//g|sed 's/[a-z\.\/\-]*@sha256://') >> $GITHUB_OUTPUT

      - name: Update monitoring service image version
        run: |
          sed -i 's/sha256: .*/sha256: ${{ steps.monitoring-service-tag.outputs.MONITORING_SERVICE_IMAGE_SHA }}/g' ./charts/transport-management/charts/monitoring-service/values.yaml &&
          git add ./charts/transport-management/charts/monitoring-service/values.yaml

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Updated chart versions"
          git checkout develop
          git merge master

      - name: Push version changes to develop
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: develop

      - name: Push version changes to master
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install Chart
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: |
            cat > new-values.yaml << EOF
            ingress:
              annotations:
                cert-manager.io/cluster-issuer: ${{ env.K8S_CLUSTER_ISSUER }}
                ingress.kubernetes.io/force-ssl-redirect: "true"
                ingress.kubernetes.io/proxy-body-size: 150m
                kubernetes.io/ingress.class: nginx
                nginx.ingress.kubernetes.io/proxy-body-size: 150m
                nginx.org/client-max-body-size: 150m
                nginx.org/proxy-connect-timeout: 30s
                nginx.org/proxy-read-timeout: 30s
              labels:
                use-cloudflare-solver: "true"
              tls:
                secretName: ${{ env.K8S_TLS_SECRET_NAME }}
            tyk:
              hostname: ${{ env.TYK_HOSTNAME }}
            auth:
              hostname: ${{ env.AUTH_HOSTNAME }}
            rabbitManagement:
              hostname: ${{ env.RABBIT_MANAGEMENT_HOSTNAME }}
            vehicle-data-receiver:
              storage:
                size: ${{ env.K8S_DATA_RECEIVER_STORAGE_SIZE }}
                storageClass: ${{ env.K8S_DATA_RECEIVER_STORAGE_CLASS }}
            hcv:
              path: ${{ env.HCV_PATH }}
              server: ${{ env.HCV_SERVER }}
              secretName: ${{ env.HCV_TOKEN_SECRET_NAME }}
            EOF
            helm upgrade transport-management ./charts/transport-management --namespace ${{ env.K8S_NAMESPACE }} -f new-values.yaml
